services:
  nginx:
    container_name: nginx
    image: nginx:latest
    ports:
      - 80:80
      - 443:443
    volumes:
      - /home/ubuntu/nginx/conf:/etc/nginx
      - /home/ubuntu/nginx/html:/usr/share/nginx/html
      - /home/ubuntu/nginx/logs:/var/log/nginx
      - /home/ubuntu/certbot/conf:/etc/letsencrypt
      - /home/ubuntu/certbot/www:/var/www/certbot
    restart: always
    environment:
      - TZ=Asia/Seoul

  certbot:
    container_name: certbot
    image: certbot/certbot:latest
    volumes:
      - /home/ubuntu/certbot/conf:/etc/letsencrypt
      - /home/ubuntu/certbot/www:/var/www/certbot
      - /home/ubuntu/certbot/logs:/var/log/letsencrypt
    restart: unless-stopped
    environment:
      - TZ=Asia/Seoul
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'" 

  influx-db:
    container_name: device-time-series
    image: influxdb:latest
    ports:
      - 8086:8086
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB2_ADMIN_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB2_ADMIN_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB2_ADMIN_TOKEN}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB2_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=home
    restart: unless-stopped
    volumes:
      - /home/ubuntu/influx_db/data:/var/lib/influxdb2
      - /home/ubuntu/influx_db/config:/etc/influxdb2

  mysql:
    container_name: user-device
    image: mysql:latest
    ports:
      - 3306:3306
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USERNAME}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    volumes:
      - /home/ubuntu/mysql:/var/lib/mysql
    restart: unless-stopped

  mongo:
    container_name: counseling-log
    image: mongo:latest
    ports:
      - 27017:27017
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}

  jenkins-master:
    container_name: jenkins-master
    image: jenkins/jenkins:jdk21
    ports:
      - 50000:50000
    expose:
      - 8080
    volumes:
      - /home/ubuntu/jenkins_home/master:/var/jenkins_home
    restart: always
    user: jenkins
    environment:
      - TZ=Asia/Seoul
      - JENKINS_OPTS="--prefix=/jenkins"

  java-agent:
    container_name: java-agent
    image: jenkins/inbound-agent:latest-jdk21
    restart: always
    volumes:
      - /home/ubuntu/agent/java/apt-cache:/var/cache.apt
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TZ=Asia/Seoul
      - JENKINS_URL=${JENKINS_MASTER_URL}
      - JENKINS_AGENT_NAME=java-agent
      - JENKINS_SECRET=${JAVA_AGENT_SECRET}
      - JENKINS_AGENT_WORKDIR=/home/jenkins/agent

  js-agent:
    container_name: js-agent
    image: jenkins/inbound-agent:latest
    restart: always
    volumes:
      - /home/ubuntu/agent/js/apt-cache:/var/cache.apt
    environment:
      - TZ=Asia/Seoul
      - JENKINS_URL=${JENKINS_MASTER_URL}
      - JENKINS_AGENT_NAME=js-agent
      - JENKINS_SECRET=${JS_AGENT_SECRET}
      - JENKINS_AGENT_WORKDIR=/home/jenkins/agent

  python-agent:
    container_name: python-agent
    image: jenkins/inbound-agent:latest
    restart: always
    volumes:
      - /home/ubuntu/agent/python/apt-cache:/var/cache.apt
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TZ=Asia/Seoul
      - JENKINS_URL=${JENKINS_MASTER_URL}
      - JENKINS_AGENT_NAME=python-agent
      - JENKINS_SECRET=${PYTHON_AGENT_SECRET}
      - JENKINS_AGENT_WORKDIR=/home/jenkins/agent

  kafka:
    container_name: kafka
    image: bitnami/kafka:latest
    ports:
      - 8003:9094
      - 9094:9094
    volumes:
      - /home/ubuntu/kafka:/bitnami/kafka
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://{service_name}:8003
    user: root

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    expose:
      - 3000
    environment:
      - ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_AUTH_ANONYMOUS_ENABLED=ture
    volumes:
      - /home/ubuntu/monitoring/grafana/data:/var/lib/grafana
      - /home/ubuntu/monitoring/grafana/grafana.ini:/etc/grafana/grafana.ini

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    ports:
      - 9090:9090
    volumes:
      - /home/ubuntu/monitoring/prometheus:/etc/prometheus
      - /home/ubuntu/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  loki:
    container_name: loki
    image: grafana/loki:latest
    ports:
      - 3100:3100
    user: "1000"
    volumes:
      - /home/ubuntu/monitoring/loki:/loki
      - /home/ubuntu/monitoring/loki/config.yaml:/etc/loki/loki-config.yaml

  kafka-exporter:
    container_name: kafka-exporter
    image: danielqsj/kafka-exporter:latest
    expose:
      - 9308
    command:
      - --kafka.server=kafka:9092

  nginx-exporter:
    container_name: nginx-exporter
    image: nginx/nginx-prometheus-exporter:latest
    expose:
      - 9113
    command:
      - --nginx.scrape-uri=http://nginx/stub_status

  promtail:
    container_name: promtail
    image: grafana/promtail:latest
    volumes:
      - /home/ubuntu/nginx/logs:/var/log/nginx
      - /home/ubuntu/monitoring/promtail:/etc/promtail
    command:
      - -config.file=/etc/promtail/config.yml
