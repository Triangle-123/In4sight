pipeline {
    agent {
        label 'java-agent'
    }

    stages {
        stage('Check Parameters') {
            steps {
                script {
                    env.MR_URL = 'http://mr-url'
                    env.TARGET_BRANCH = 'api/release'

                    echo "Merge Request URL: ${params.MR_URL}"
                    echo "Target Branch: ${params.TARGET_BRANCH}"

                    if ((!params.MR_URL || !params.TARGET_BRANCH) && (!env.MR_URL || !env.TARGET_BRANCH)) {
                        error("파라미터가 올바르지 않습니다.")
                    }
                }
            }
        }

        stage('Checkout') {
            steps {
                checkout scmGit(
                    branches: [[name: params.TARGET_BRANCH ? params.TARGET_BRANCH : env.TARGET_BRANCH]], 
                    extensions: [], 
                    userRemoteConfigs: [
                        [
                            credentialsId: '74b0ab04-f812-4119-8d9b-23d2fb4ac978',
                            url: 'https://lab.ssafy.com/s12-s-project/S12P21S004.git'
                        ]
                    ]
                )
            }
        }

        stage('Grant Permission') {
            steps {
                sh 'cd api && chmod +x gradlew'
            }
        }

        stage('Add .env') {
            steps {
                withCredentials([file(credentialsId: 'api-env', variable: 'ENV_FILE')]) {
                    sh '''
                        cd api
                        if [ -f .env ]; then
                            rm .env
                        fi
                        cp $ENV_FILE .env
                    '''
                }
            }
        }

        stage('Build') {
            steps {
                sh 'cd api && ./gradlew clean build -x test'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'cd api && docker build -t in4sight-api .'
            }
        }

        stage('Deploy') {
            steps {
                sh '''
                    if [ "$(docker ps -q -f name=api-server)" ]; then
                        docker stop api-server
                        docker rm api-server
                    fi
                '''
                sh 'cd api && docker run -d --name api-server --env-file .env --expose 8080 -e TZ=Asia/Seoul --network ubuntu_default in4sight-api'
            }
        }

        stage("Notify") {
            steps {
                script {
                    build job: 'in4sight-notification',
                        parameters: [
                            string(name: 'MR_URL', value: params.MR_URL ? params.MR_URL : env.MR_URL),
                            string(name: 'TARGET_BRANCH', value: params.TARGET_BRANCH ? params.TARGET_BRANCH : env.TARGET_BRANCH),
                            string(name: 'is_success', value: 'true')
                        ],
                        wait: false
                }
            }
        }
    }
}
