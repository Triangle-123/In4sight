plugins {
    id 'java'
    id 'checkstyle'
    id 'maven-publish'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.in4sight'
version = '0.1.1'

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

checkstyle {
    maxWarnings = 0
    configFile = file("${rootDir}/checkstyle/naver-checkstyle-rules-custom.xml")
    configProperties = ["suppressionFile":"${rootDir}/checkstyle/naver-checkstyle-suppressions.xml"]
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-json'
    implementation 'org.springframework.kafka:spring-kafka'
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
}

def env = new Properties()
file('.env').withInputStream {  env.load(it) }

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            
            groupId = project.group
            artifactId = project.name
            version = project.version
            
            pom {
                name = 'EDA Java'
                description = 'Event-Driven Architecture Java Library'
                url = 'https://github.com/in4sight/eda-java'
                
                developers {
                    developer {
                        id = 'in4sight'
                        name = 'In4sight Team'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            url env.getProperty("PUBLISH_URL")
            credentials {
                username = env.getProperty("USERNAME")
                password = env.getProperty("TOKEN")
            }
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('generateMetadataFileForMavenJavaPublication') {
    suppressedValidationErrors.add('dependencies-without-versions')
}
