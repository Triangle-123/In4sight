plugins {
    id 'java'
    id 'checkstyle'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.in4sight'
version = '0.0.1-SNAPSHOT'

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

checkstyle {
    maxWarnings = 0
    configFile = file("${rootDir}/checkstyle/naver-checkstyle-rules-custom.xml")
    configProperties = ["suppressionFile":"${rootDir}/checkstyle/naver-checkstyle-suppressions.xml"]
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

// 환경변수를 가져와서 Private한 Package Repository 접근을 등록
def env = new Properties()
file('.env').withInputStream {  env.load(it) }

repositories {
    mavenCentral()

    maven {
        url env.getProperty("PACKAGE_URL")
        credentials {
            username = env.getProperty("USERNAME")
            password = env.getProperty("TOKEN")
        }
    }
}

dependencies {
    // spring boot dependency
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    // event driven architecture
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'com.in4sight:eda:0.1.2'
    // logging
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    implementation 'com.github.loki4j:loki-logback-appender:1.4.2'
    // database
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    runtimeOnly 'com.mysql:mysql-connector-j'
    // tools
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-parameters"
}
